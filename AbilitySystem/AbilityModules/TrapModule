local ServerStorage = game:GetService("ServerStorage")
local UtilityModule = require(ServerStorage:FindFirstChild("Modules"):FindFirstChild("UtilityModule"))
local Teams = game:GetService("Teams")
local CoolDownRemote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):FindFirstChild("CoolDownRemote")

local module = {}

module.Config = {
	Price = 0,
	AnimationId = nil,--I dont think you'll need one, but just incase
	Trap = ServerStorage:FindFirstChild("Abilities"):FindFirstChild("Trap"),
	Cooldown = 5,
	Duration = 10,
	StunDuration = 5,
	Radius = 5,
	UsersTeam = "",
	TeamOnly = "",
}

local CoolDowns = {}

function module.OnActivation(plr:Player)
	local Now = tick()
	local LastUsed = CoolDowns[plr.UserId] or 0
	if Now - LastUsed < module.Config.Cooldown then 
		warn("CoolDown Still Active")
		return
	end

	if plr:GetAttribute("Frozen") == true then 
		return
	end

	CoolDowns[plr.UserId] = Now
	CoolDownRemote:FireClient(plr, module.Config.Cooldown)
	module.DropTrap(plr)
end

function module.Detect(plr, Trap)
	local AlreadyHit = {}

	while Trap and Trap.Parent do
		task.wait(0.1)
		local Targets = UtilityModule.GetPlayersInRadius(Trap.Position, module.Config.Radius)
		for _, target in pairs(Targets) do
			if target ~= plr and not AlreadyHit[target.UserId] then
				local Char = target.Character
				if Char then
					local Direction = (Char.PrimaryPart.Position - Trap.Position).Unit
					UtilityModule.ApplyKnockback(Char, Direction, 100)
					UtilityModule.RagdollPlayer(target)
					AlreadyHit[target.UserId] = true
					task.delay(module.Config.StunDuration, function()
						AlreadyHit[target.UserId] = nil
					end)
				end
			end
		end
	end
end

function module.DropTrap(plr:Player)
	print("Recieved")
	local Char = plr.Character
	if not Char then return end

	local Hum = Char:FindFirstChildOfClass("Humanoid")
	if not Hum then return end

	local HRP = Char:FindFirstChild("HumanoidRootPart")
	if not HRP then return end

	local Direction = HRP.CFrame.LookVector
	local Animator = Hum:FindFirstChildOfClass("Animator")
	if not Animator then
		Animator = Instance.new("Animator")
		Animator.Name = "Animator"
		Animator.Parent = Hum
	end

	if module.Config.AnimationId then
		local Animation = Instance.new("Animation")
		Animation.AnimationId = module.Config.AnimationId

		local Track = Animator:LoadAnimation(Animation)
		Track.Priority = Enum.AnimationPriority.Action
		Track:Play()
	end

	print("About to drop")
	local NewTrap = module.Config.Trap:Clone()
	NewTrap.Parent = game.Workspace:FindFirstChild("Debris")
	NewTrap.Position = HRP.Position + Direction * 10

	UtilityModule.Debris(NewTrap, module.Config.Duration)

	module.Detect(plr, NewTrap)
end

return module
